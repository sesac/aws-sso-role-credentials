#!/usr/bin/ruby
# frozen_string_literal: true

require 'json'
require 'time'
require 'parseconfig'
require 'pathname'

# Reads profile info from config file
config = ParseConfig.new(Pathname('~/.aws/config').expand_path)
profile_config = config["profile #{ARGV[0]}"]

# Finds current session, checks if expired
cache = Dir[Pathname('~/.aws/sso/cache/*.json').expand_path]
        .map(&method(:Pathname)).map(&:read).map(&JSON.method(:parse)).find { |blob|
  blob['startUrl'] == profile_config['sso_start_url']
}

raise ArgumentError, 'expired sso session' if Time.parse(cache['expiresAt']) < Time.now

# Retrieves new credentials
cred_resp = `aws sso get-role-credentials --profile #{ARGV[0]} --role-name #{profile_config['sso_role_name']} --account-id #{profile_config['sso_account_id']} --access-token #{cache['accessToken']} --region #{profile_config['region']}`
role_creds = JSON.parse(cred_resp)['roleCredentials']

profile_creds = {
  'aws_access_key_id' => role_creds['accessKeyId'],
  'aws_secret_access_key' => role_creds['secretAccessKey'],
  'aws_session_token' => role_creds['sessionToken']
}
credentials_path = Pathname('~/.aws/credentials').expand_path
credentials = ParseConfig.new(credentials_path)

# Saves new credentials to specified profile name (will over-write previous values)
credentials.add(ARGV[0], profile_creds)
credentials.write(credentials_path.open('w'), quoted = false)
